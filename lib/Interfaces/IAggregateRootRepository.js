/**
 * This interface specifies how an Aggregate Root repository should behave.
 * Since all Aggregate Roots are entities, each of them is assigned an ID.
 * The aggregate ID is the main means of selecting an aggregate root from the domain to operate on.
 * @interface
 */
function IAggregateRootRepository(){}

//TODO: Better constructor and operation type documentation (look up Google Closure Compiler's type language) - including parameter types and return types.
/**
 * Select an aggregate by ID and carry out an operation on it, then save the changes generated by the operation.
 * If no changes occur in the course of the operation, saving may be skipped.
 * @abstract
 * @method
 * @param {function} aggregateRootConstructor The constructor function that shall be used in order to obtain an Aggregate Root instance to operate on.
 * @param {string} aggregateRootID Entity ID of the Aggregate Root to load. The persistence mechanism employed by the repository shall perform a lookup by this ID to retrieve the Aggregate Root's state.
 * @param {function} operation The function to call with the AR instance as the sole argument.
 * @returns {Promise}
 */
IAggregateRootRepository.prototype.execute = function execute(aggregateRootConstructor, aggregateRootID, operation){};

module.exports.IAggregateRootRepository = IAggregateRootRepository;